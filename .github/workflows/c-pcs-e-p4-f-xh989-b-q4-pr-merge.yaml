# Look for the tags __MAKE__CHANGES__FROM__HERE__ and __MAKE__CHANGES__TO__HERE__
name: "Pull request merge from breakout to ancestor"
on:
  pull_request:
    types:
    - closed
    # run on pull request merge from breakout branch to ancestor

env:
  brkoutName: pr-${{ github.event.number }}

concurrency:
  group: pr-merge-to-${{ github.event.pull_request.base.ref }}
  cancel-in-progress: false
 
jobs:
  pr-merge:
    runs-on: [kubefocus-org]
    if: ${{ github.head_ref == 'c/pcs-e/p4-f/xh989-b/q4' && github.event.pull_request.merged == true && contains(toJson(github.event.pull_request.labels.*.name), 'breakout') }}
    steps:
    - name: Checkout merged base branch
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.base.ref }}

    - name: Show git status
      run: |
        echo "Base branch: ${{ github.event.pull_request.base.ref }}"
        git log -1 --oneline

    - name: Build deployments
      id: build
      timeout-minutes: 20
      run: |
        echo "$brkoutName"
        # __MAKE__CHANGES__FROM__HERE__

        # place build commands here
        # Build image and push to registry for container 'server' of deployment 'recommendationservice'
        tag=$(git rev-parse --short=8 HEAD)
        cd src/recommendationservice
        docker buildx build . -t registry.gitlab.com/novusbee/microservices/recommendationservice:${tag}
        docker push registry.gitlab.com/novusbee/microservices/recommendationservice:${tag}
        echo "IMAGE_recommendationservice_server=registry.gitlab.com/novusbee/microservices/recommendationservice:${tag}" >> $GITHUB_OUTPUT
        cd ../..
        
        # __MAKE__CHANGES__TO__HERE__

    - name: Update Container Images
      timeout-minutes: 20
      run: |
        at=$(curl --silent -X POST https://appez-keycloak.kubefocus.com/realms/kubefocus.com/protocol/openid-connect/token   -d grant_type=client_credentials   -d client_id=${{secrets.KC_CLIENT_ID}} -d client_secret=${{ secrets.KC_CLIENT_SECRET }} -d scope=openid | jq -r '.access_token')
        tgtResult=$(curl -s -H 'accept: application/json' -H "X-Auth-Bearer-Token: ${at}" -H 'content-type: application/json' 'https://appez.kubefocus.com/api/v1/breakouts/detail?organization=kubefocus.com&cluster=do1&environment=dev&application=microservices&feature=recos&breakout=appez-dflt-brkout&includeStatus=true' 2> /dev/null)
        srcResult=$(curl -s -H 'accept: application/json' -H "X-Auth-Bearer-Token: ${at}" -H 'content-type: application/json' 'https://appez.kubefocus.com/api/v1/breakouts/detail?organization=kubefocus.com&cluster=do1&environment=dev&application=microservices&feature=recos&breakout=recos-d3&includeStatus=true' 2> /dev/null)
        echo "Current target moduleRefs"
        echo $tgtResult | jq -r '.spec.moduleRefs'
        echo "Current source moduleRefs"
        echo $srcResult | jq -r '.spec.moduleRefs'
        tresult=$(jq --argjson srcRefs "$(jq -r '.spec.moduleRefs' <<< "$srcResult")"  '.spec.moduleRefs = $srcRefs' <<< "$tgtResult")
        sresult=$(jq '.spec.moduleRefs = []' <<< "$srcResult")
        echo $tresult | jq > tgtBreakout.json
        echo $sresult | jq > srcBreakout.json
        echo "After replace of target moduleRefs"
        cat tgtBreakout.json
        echo "After emptying of source moduleRefs"
        cat srcBreakout.json

        tresult=$(echo $tresult | jq '.spec.moduleRefs |= map(
          if .kind == "Deployment" and .name == "recommendationservice" then
            .containers |= map(
              if .name == "server" then
                .image = "${{ steps.build.outputs.IMAGE_recommendationservice_server }}"
              end
            )
          end
        )')

        echo $tresult | jq -r '.spec.moduleRefs'

        echo $tresult | jq -r '.spec.moduleRefs'
        echo $tresult | jq > tgtBreakout.json
        echo "Final target breakout spec"
        cat tgtBreakout.json

    - name: Update Breakout
      timeout-minutes: 20
      run: |
        at=`curl --silent -X POST https://appez-keycloak.kubefocus.com/realms/kubefocus.com/protocol/openid-connect/token   -d grant_type=client_credentials   -d client_id=${{secrets.KC_CLIENT_ID}} -d client_secret=${{ secrets.KC_CLIENT_SECRET }} -d scope=openid | jq -r '.access_token'`
        curl -X PUT https://appez.kubefocus.com/api/v1/breakouts -H "X-Auth-Bearer-Token: ${at}" -H 'Content-Type: application/json' --data-binary @tgtBreakout.json
        if [[ "recos-d3" == "appez-dflt-brkout" ]]
        then
          curl -X PUT https://appez.kubefocus.com/api/v1/breakouts -H "X-Auth-Bearer-Token: ${at}" -H 'Content-Type: application/json' --data-binary @srcBreakout.json
        fi
