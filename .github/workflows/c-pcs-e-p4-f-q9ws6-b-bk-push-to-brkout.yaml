# Look for the tags __MAKE__CHANGES__FROM__HERE__ and __MAKE__CHANGES__TO__HERE__
name: "Update and deploy breakout"
on:
  push:
    # run on push to branch
    branches:
    - c/pcs-e/p4-f/q9ws6-b/bk

jobs: 
  update-breakout:
    runs-on: [kubefocus-org]
    steps:
    - uses: actions/checkout@v4

    - name: Check Permissions
      id: checkPerms
      timeout-minutes: 20
      run: |
        at=$(curl --silent -X POST https://appez-keycloak.kubefocus.com/realms/kubefocus.com/protocol/openid-connect/token   -d grant_type=client_credentials   -d client_id=${{secrets.KC_CLIENT_ID}} -d client_secret=${{ secrets.KC_CLIENT_SECRET }} -d scope=openid | jq -r '.access_token')
        result=$(curl --silent -XPOST 'https://appez-keycloak.kubefocus.com/admin/realms/kubefocus.com/clients/${{ secrets.KC_CLIENT_UUID }}/authz/resource-server/policy/evaluate' -H 'accept: application/json' -H "authorization: Bearer ${at}" -H 'content-type: application/json' --data-raw '{"userId":"bd40bcd8-e736-4135-b8ce-845fae47e4b1","resources":[{"_id":"3fecdc1e-7bf1-4a9e-85cb-77e93d00b251","scopes":[{"name":"update"}]}]}' | jq -r '.results.[0].allowedScopes | length')
        if [[ "$result" -eq 0 ]]; then
          echo "User does not have permission to update breakout. Skipping workflow."
          exit 1
        else
          echo "User can update the breakout. Continuing."
          exit 0
        fi

    - name: Wait for in progress jobs
      id: waitRsrcInProg
      timeout-minutes: 20
      run: |
        timeout=600
        interval=10
        elapsed=0

        while true; do
          at=$(curl --silent -X POST https://appez-keycloak.kubefocus.com/realms/kubefocus.com/protocol/openid-connect/token   -d grant_type=client_credentials   -d client_id=${{secrets.KC_CLIENT_ID}} -d client_secret=${{ secrets.KC_CLIENT_SECRET }} -d scope=openid | jq -r '.access_token')
          result=$(curl -s -H 'accept: application/json' -H "X-Auth-Bearer-Token: ${at}" -H 'content-type: application/json' 'https://appez.kubefocus.com/api/v1/breakouts/detail?organization=kubefocus.com&cluster=do1&environment=dev&application=microservices&feature=sports&breakout=sports' -w "%{http_code}" -o /dev/null)
          if [[ "$result" -eq 200 ]]; then
            echo "Able to access brkout"
          else
            echo "Error in accessing breakout. Skipping workflow."
            exit 1
          fi

          inProg=$(curl -s -H 'accept: application/json' -H "X-Auth-Bearer-Token: ${at}" -H 'content-type: application/json' 'https://appez.kubefocus.com/api/v1/breakouts/detail?organization=kubefocus.com&cluster=do1&environment=dev&application=microservices&feature=sports&breakout=sports' 2> /dev/null | jq -e '.metadata.annotations."appez-in-progress"')
          if [[ "$inProg" == "\"true\"" ]]; then
            echo "Breakout resource processing is in progress. Retrying after 10 seconds."
          else
            echo "Breakout resource processing is not in progress. Continue with update"
            break
          fi

          if [ "$elapsed" -ge "$timeout" ]; then
            echo "Timed out waiting for breakout processing to complete." >&2
            exit 1
          fi

          echo "Waiting for breakout processing to complete..."
          sleep $interval
          elapsed=$((elapsed + interval))
        done

    - name: Build deployments
      id: build
      timeout-minutes: 20
      run: |
        # __MAKE__CHANGES__FROM__HERE__

        # place build commands here
        # Build image and push to registry for container 'server' of deployment 'frontend'
        tag=$(git rev-parse --short=8 HEAD)
        cd src/frontend_sports
        mkdir -p bin
        go build -o bin/frontend
        docker buildx build . -t registry.gitlab.com/novusbee/microservices/frontend:${tag}
        docker push registry.gitlab.com/novusbee/microservices/frontend:${tag}
        echo "IMAGE_frontend_server=registry.gitlab.com/novusbee/microservices/frontend:${tag}" >> $GITHUB_OUTPUT
        cd ../..
        
        # Build image and push to registry for container 'server' of deployment 'productcatalogservice'
        tag=$(git rev-parse --short=8 HEAD)
        cd src/productcatalogservice_sports
        docker buildx build . -t registry.gitlab.com/novusbee/microservices/productcatalogservice:${tag}
        docker push registry.gitlab.com/novusbee/microservices/productcatalogservice:${tag}
        echo "IMAGE_productcatalogservice_server=registry.gitlab.com/novusbee/microservices/productcatalogservice:${tag}" >> $GITHUB_OUTPUT
        cd ../..
        
        # __MAKE__CHANGES__TO__HERE__

    - name: Update Container Images
      timeout-minutes: 20
      run: |
        at=$(curl --silent -X POST https://appez-keycloak.kubefocus.com/realms/kubefocus.com/protocol/openid-connect/token   -d grant_type=client_credentials   -d client_id=${{secrets.KC_CLIENT_ID}} -d client_secret=${{ secrets.KC_CLIENT_SECRET }} -d scope=openid | jq -r '.access_token')
        result=$(curl -s -H 'accept: application/json' -H "X-Auth-Bearer-Token: ${at}" -H 'content-type: application/json' 'https://appez.kubefocus.com/api/v1/breakouts/detail?organization=kubefocus.com&cluster=do1&environment=dev&application=microservices&feature=sports&breakout=sports&includeStatus=true' 2> /dev/null)
        echo $result | jq -r '.spec.moduleRefs'

        result=$(echo $result | jq '.spec.moduleRefs |= map(
          if .kind == "Deployment" and .name == "frontend" then
            .containers |= map(
              if .name == "server" then
                .image = "${{ steps.build.outputs.IMAGE_frontend_server }}"
              end
            )
          end
        )')

        echo $result | jq -r '.spec.moduleRefs'

        result=$(echo $result | jq '.spec.moduleRefs |= map(
          if .kind == "Deployment" and .name == "productcatalogservice" then
            .containers |= map(
              if .name == "server" then
                .image = "${{ steps.build.outputs.IMAGE_productcatalogservice_server }}"
              end
            )
          end
        )')

        echo $result | jq -r '.spec.moduleRefs'

        echo $result | jq -r '.spec.moduleRefs'
        echo $result | jq > breakout.json

    - name: Update Breakout
      timeout-minutes: 20
      run: |
        at=`curl --silent -X POST https://appez-keycloak.kubefocus.com/realms/kubefocus.com/protocol/openid-connect/token   -d grant_type=client_credentials   -d client_id=${{secrets.KC_CLIENT_ID}} -d client_secret=${{ secrets.KC_CLIENT_SECRET }} -d scope=openid | jq -r '.access_token'`
        curl -X PUT https://appez.kubefocus.com/api/v1/breakouts -H "X-Auth-Bearer-Token: ${at}" -H 'Content-Type: application/json' --data-binary @breakout.json